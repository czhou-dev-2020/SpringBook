package com.rillsoft.springbookadmin.model;

// import com.rillsoft.springbookadmin.Config.WebSecurityConfig;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.CredentialsContainer;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.util.Assert;

import java.util.*;
import java.util.function.Function;

// Refer to:
//      https://github.com/spring-projects/spring-security/blob/main/core/src/main/java/org/springframework/security/
//          core/userdetails/UserDetails.java
//      https://github.com/spring-projects/spring-security/blob/main/core/src/main/java/org/springframework/security/
//          core/userdetails/User.java
// comment added by crane zhou on 2021.10.26
//
//
//public class SecurityAuthUsers extends AuthUsers implements UserDetails, CredentialsContainer {
//
//    private static final Logger m_objLogger = LoggerFactory.getLogger(SecurityAuthUsers.class);
//
//    private String m_strPassword;
//    private final String m_strUsername;
//    private final Collection<GrantedAuthority> m_objAuthorities;
//    private final boolean m_bAccountNonExpired;
//    private final boolean m_bAccountNonLocked;
//    private final boolean m_bCredentialsNonExpired;
//    private final boolean m_bEnabled;
//
//    /**
//     * This method was generated by MyBatis Generator.
//     * This method corresponds to the database table tbl_auth_users
//     *
//     * @param id
//     * @param username
//     * @param password
//     * @param fullname
//     * @param userEmail
//     * @param userPhone
//     * @param lastLogin
//     * @param dateJoined
//     * @param userStatus
//     * @param roleId
//     * @param roleName
//     * @param groupId
//     * @param groupName
//     * @param cityId
//     * @param cityName
//     * @param remark
//     * @mbg.generated Tue Oct 19 16:38:17 CST 2021
//     */
//    public SecurityAuthUsers(Integer id, String username, String password, String fullname, String userEmail, String userPhone, Date lastLogin, Date dateJoined, Integer userStatus, Integer roleId, String roleName, Integer groupId, String groupName, Integer cityId, String cityName, String remark) {
//        super(id, username, password, fullname, userEmail, userPhone, lastLogin, dateJoined, userStatus, roleId, roleName, groupId, groupName, cityId, cityName, remark);
//
//        this.m_strUsername = "";
//        this.m_strPassword = "";
//        this.m_bAccountNonExpired = true;
//        this.m_bAccountNonLocked = true;
//        this.m_bEnabled = true;
//        this.m_bCredentialsNonExpired = true;
//
//        this.m_objAuthorities = null;
//    }
//
//    /**
//     * This method was generated by MyBatis Generator.
//     * This method corresponds to the database table tbl_auth_users
//     *
//     * @mbg.generated Wed Sep 29 15:21:51 CST 2021
//     */
//    public SecurityAuthUsers() {
//        this.m_strUsername = "";
//        this.m_strPassword = "";
//        this.m_bAccountNonExpired = true;
//        this.m_bAccountNonLocked = true;
//        this.m_bEnabled = true;
//        this.m_bCredentialsNonExpired = true;
//
//        this.m_objAuthorities = null;
//    }
//
//    // added by crane zhou on 2021.11.01
//    /**
//     *
//     * @param strUsername
//     * @param strPassword
//     * @param objAuthorities
//     */
//    public SecurityAuthUsers(String strUsername, String strPassword,
//                             Collection<? extends GrantedAuthority> objAuthorities) {
//        this(strUsername, strPassword, true, true, true, true, objAuthorities);
//    }
//
//    // added by crane zhou on 2021.11.01
//    /**
//     *
//     * @param strUsername
//     * @param strPassword
//     * @param bEnabled
//     * @param bAccountNonExpired
//     * @param bCredentialsNonExpired
//     * @param bAccountNonLocked
//     * @param objAuthorities
//     */
//    public SecurityAuthUsers(String strUsername, String strPassword, boolean bEnabled,
//                      boolean bAccountNonExpired, boolean bCredentialsNonExpired,
//                      boolean bAccountNonLocked, Collection<? extends GrantedAuthority> objAuthorities) {
//
//        if (((strUsername == null) || "".equals(strUsername)) || (strPassword == null)) {
//            throw new IllegalArgumentException(
//                    "Cannot pass null or empty values to constructor");
//        }
//
//        this.m_strUsername = strUsername;
//        this.m_strPassword = strPassword;
//        this.m_bEnabled = bEnabled;
//        this.m_bAccountNonExpired = bAccountNonExpired;
//        this.m_bCredentialsNonExpired = bCredentialsNonExpired;
//        this.m_bAccountNonLocked = bAccountNonLocked;
//        this.m_objAuthorities = (Collection<GrantedAuthority>) objAuthorities;
//
////        m_objLogger.info ("strPassword=" + strPassword);
//    }
//
//    // added by crane zhou on 10.20.2021
//    public SecurityAuthUsers(AuthUsers theUser)
//    {
//        if (theUser != null)
//        {
//            this.setId(theUser.getId());
//            this.setUsername(theUser.getUsername());
//            this.setPassword(theUser.getPassword());
//            this.setFullname(theUser.getFullname());
//            this.setUserEmail(theUser.getUserEmail());
//            this.setUserPhone(theUser.getUserPhone());
//            this.setLastLogin(theUser.getLastLogin());
//            this.setDateJoined(theUser.getDateJoined());
//            this.setUserStatus(theUser.getUserStatus());
//            this.setRoleId(theUser.getRoleId());
//            this.setRoleName(theUser.getRoleName());
//            this.setGroupId(theUser.getGroupId());
//            this.setGroupName(theUser.getGroupName());
//            this.setCityId(theUser.getCityId());
//            this.setCityName(theUser.getCityName());
//            this.setRemark(theUser.getRemark());
//        }
//
//        // added by crane zhou on 2021.11.01 (temporarily)
//        // CustomAccessDenied(Handler) functions not available yet.
//        this.m_strUsername = "";
//        this.m_strPassword = "";
//        this.m_bAccountNonExpired = true;
//        this.m_bAccountNonLocked = true;
//        this.m_bEnabled = true;
//        this.m_bCredentialsNonExpired = true;
//
//        this.m_objAuthorities = null;
//    }
//
//    // Added by crane zhou on 2021.10.20
//    // Refer to:
//    // https://github.com/spring-projects/spring-security/blob/main/core/src/main/java/org/springframework/security/
//    // core/authority/SimpleGrantedAuthority.java
//    //
//    @Override
//    public Collection<GrantedAuthority> getAuthorities() {
//        return m_objAuthorities;
//    }
//
//    @Override
//    public boolean isAccountNonExpired() {
//        return m_bAccountNonExpired;
//    }
//
//    @Override
//    public boolean isAccountNonLocked() {
//        return m_bAccountNonLocked;
//    }
//
//    @Override
//    public boolean isCredentialsNonExpired() {
//        return m_bCredentialsNonExpired;
////        return false;
//    }
//
//    @Override
//    public boolean isEnabled() {
//        return m_bEnabled;
//    }
//
//    @Override
//    public boolean isAccountVerified() { return true; }
//
////    @Override
//    public boolean isLoginDisabled() { return true; }
//
//    @Override
//    public void eraseCredentials() {
//        this.m_strPassword = null;
//    }
//
//    @Override
//    public boolean equals(Object rhs) {
//        if (rhs instanceof SecurityAuthUsers) {
//            return m_strUsername.equals(((SecurityAuthUsers) rhs).m_strUsername);
//        }
//        return false;
//    }
//
//    @Override
//    public int hashCode() {
//        return m_strUsername.hashCode();
//    }
//
//    public static SecurityAuthUsers.UserBuilder withUsername(String strUsername) {
//        return builder().username(strUsername);
//    }
//
//    public static SecurityAuthUsers.UserBuilder builder() {
//        return new SecurityAuthUsers.UserBuilder();
//    }
//
//    public static SecurityAuthUsers.UserBuilder withUserDetails(UserDetails objUserDetails) {
//        return withUsername(objUserDetails.getUsername())
//                .password(objUserDetails.getPassword())
//                .accountExpired(!objUserDetails.isAccountNonExpired())
//                .accountLocked(!objUserDetails.isAccountNonLocked())
//                .authorities(objUserDetails.getAuthorities())
//                .credentialsExpired(!objUserDetails.isCredentialsNonExpired())
//                .disabled(!objUserDetails.isEnabled());
//    }
//
//    public static class UserBuilder {
//        private String m_strUsername;
//        private String m_strPassword;
//        private List<GrantedAuthority> m_objAuthorities;
//        private boolean m_bAccountExpired;
//        private boolean m_bAccountLocked;
//        private boolean m_bCredentialsExpired;
//        private boolean m_bDisabled;
//        private Function<String, String> m_objPasswordEncoder = password -> password;
////        private BCryptPasswordEncoder m_objPasswordEncoder;
//
//        /**
//         * Creates a new instance
//         */
//        private UserBuilder() {
//        }
//
//        public UserDetails build() {
//            String strEncodedPassword = this.m_objPasswordEncoder.apply(m_strPassword);
////            String strEncodedPassword = m_strPassword;
//            m_objLogger.info("m_strPassword:" + m_strPassword);
//
//            return new SecurityAuthUsers(m_strUsername, strEncodedPassword, !m_bDisabled, !m_bAccountExpired,
//                    !m_bCredentialsExpired, !m_bAccountLocked, m_objAuthorities);
//        }
//
//        public SecurityAuthUsers.UserBuilder username(String strUsername) {
//            Assert.notNull(strUsername, "username cannot be null");
//            this.m_strUsername = strUsername;
//            return this;
//        }
//
//        public SecurityAuthUsers.UserBuilder password(String strPassword) {
//            Assert.notNull(strPassword, "password cannot be null");
//            this.m_strPassword = strPassword;
//            return this;
//        }
//
////        public SecurityAuthUsers.UserBuilder passwordEncoder(BCryptPasswordEncoder objEncoder) {
//        public SecurityAuthUsers.UserBuilder passwordEncoder(Function<String, String> objEncoder) {
//
//            Assert.notNull(objEncoder, "encoder cannot be null");
//            this.m_objPasswordEncoder = objEncoder;
//            return this;
//        }
//
//        public SecurityAuthUsers.UserBuilder accountExpired(boolean bAccountExpired) {
//            this.m_bAccountExpired = bAccountExpired;
//            return this;
//        }
//
//        public SecurityAuthUsers.UserBuilder accountLocked(boolean bAccountLocked) {
//            this.m_bAccountLocked = bAccountLocked;
//            return this;
//        }
//
//        public SecurityAuthUsers.UserBuilder credentialsExpired(boolean bCredentialsExpired) {
//            this.m_bCredentialsExpired = bCredentialsExpired;
//            return this;
//        }
//
//        public SecurityAuthUsers.UserBuilder disabled(boolean bDisabled) {
//            this.m_bDisabled = bDisabled;
//            return this;
//        }
//
//        public SecurityAuthUsers.UserBuilder authorities(GrantedAuthority... authorities) {
//            return authorities(Arrays.asList(authorities));
//        }
//
//        public SecurityAuthUsers.UserBuilder authorities(Collection<? extends GrantedAuthority> objAuthorities) {
//            this.m_objAuthorities = new ArrayList<>(objAuthorities);
//            return this;
//        }
//        public SecurityAuthUsers.UserBuilder authorities(String... objAuthorities) {
//            return authorities(AuthorityUtils.createAuthorityList(objAuthorities));
//        }
//
//        public SecurityAuthUsers.UserBuilder roles(String... roles) {
//            List<GrantedAuthority> objAuthorities = new ArrayList<>(
//                    roles.length);
//            for (String role : roles) {
//                Assert.isTrue(!role.startsWith("ROLE_"), () -> role
//                        + " cannot start with ROLE_ (it is automatically added)");
//                objAuthorities.add(new SimpleGrantedAuthority("ROLE_" + role));
//            }
//            return authorities(objAuthorities);
//        }
//    }
//}
